 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/galleries", type: :request do
  
  before do 
    sign_in create(:user)
  end

  let(:valid_attributes) {
    {
      :user_id => User.create(username: 'leandrajade', name: 'leann panopio', email: 'leandrajade@gmail.com', password: 123456).id,
      :title => 'Sample title',
      :caption => 'Sample caption',
    }
  }

  let(:invalid_attributes) {
    {
      :user_id => nil,
      :title => nil,
      :caption => nil, 
    }
  }

  before(:each) do
    @user = User.find(valid_attributes[:user_id])
  end

  describe "GET /index" do
    it "renders a successful response" do
      gallery = Gallery.create! valid_attributes
      get user_galleries_url(@user)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      gallery = Gallery.create! valid_attributes
      get user_gallery_url(@user, gallery)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_user_gallery_url(@user)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      gallery = Gallery.create! valid_attributes
      get edit_user_gallery_url(@user, gallery)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Gallery" do
        expect {
          post user_galleries_url(@user), params: { gallery: valid_attributes }
        }.to change(Gallery, :count).by(1)
      end

      it "redirects to the created gallery" do
        post user_galleries_url(@user), params: { gallery: valid_attributes }
        expect(response).to redirect_to(user_gallery_url(@user, Gallery.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Gallery" do
        expect {
          post user_galleries_url(@user), params: { gallery: invalid_attributes }
        }.to change(Gallery, :count).by(0)
      end

      it "renders unprocessable entity" do
        post user_galleries_url(@user), params: { gallery: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          :user_id => User.create(username: 'billieeilish', name: 'Billie Eilish', email: 'billieeilish@gmail.com', password: 123456).id,
          :title => 'new title',
          :caption => 'new caption',
        }
      }

      it "updates the requested gallery" do
        gallery = Gallery.create! valid_attributes
        patch user_gallery_url(@user, gallery), params: { gallery: new_attributes }
        gallery.reload
        expect(gallery.title).to eq('new title')
        expect(gallery.caption).to eq('new caption')
      end

      it "redirects to the gallery" do
        gallery = Gallery.create! valid_attributes
        patch user_gallery_url(@user, gallery), params: { gallery: new_attributes }
        gallery.reload
        expect(response).to redirect_to(user_gallery_url(@user))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        gallery = Gallery.create! valid_attributes
        patch user_gallery_url(@user, gallery), params: { gallery: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested gallery" do
      gallery = Gallery.create! valid_attributes
      expect {
        delete user_gallery_url(@user, gallery)
      }.to change(Gallery, :count).by(-1)
    end

    it "redirects to the galleries list" do
      gallery = Gallery.create! valid_attributes
      delete user_gallery_url(@user, gallery)
      expect(response).to redirect_to(user_galleries_url)
    end
  end
end
